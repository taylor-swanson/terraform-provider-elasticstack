// Package fleetapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package fleetapi

import (
	"time"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AgentPolicyMonitoringEnabled.
const (
	AgentPolicyMonitoringEnabledLogs    AgentPolicyMonitoringEnabled = "logs"
	AgentPolicyMonitoringEnabledMetrics AgentPolicyMonitoringEnabled = "metrics"
)

// Defines values for AgentPolicyCreateRequestMonitoringEnabled.
const (
	AgentPolicyCreateRequestMonitoringEnabledLogs    AgentPolicyCreateRequestMonitoringEnabled = "logs"
	AgentPolicyCreateRequestMonitoringEnabledMetrics AgentPolicyCreateRequestMonitoringEnabled = "metrics"
)

// Defines values for AgentPolicyUpdateRequestMonitoringEnabled.
const (
	Logs    AgentPolicyUpdateRequestMonitoringEnabled = "logs"
	Metrics AgentPolicyUpdateRequestMonitoringEnabled = "metrics"
)

// AgentPolicy defines model for agent_policy.
type AgentPolicy struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	Agents             *float32                        `json:"agents,omitempty"`
	DataOutputId       *string                         `json:"data_output_id"`
	Description        *string                         `json:"description,omitempty"`
	DownloadSourceId   *string                         `json:"download_source_id"`
	FleetServerHostId  *string                         `json:"fleet_server_host_id"`
	Id                 string                          `json:"id"`
	InactivityTimeout  *float32                        `json:"inactivity_timeout,omitempty"`
	MonitoringEnabled  *[]AgentPolicyMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                         `json:"monitoring_output_id"`
	Name               string                          `json:"name"`
	Namespace          string                          `json:"namespace"`

	// PackagePolicies This field is present only when retrieving a single agent policy, or when retrieving a list of agent policy with the ?full=true parameter
	PackagePolicies *[]PackagePolicy `json:"package_policies,omitempty"`
	Revision        *float32         `json:"revision,omitempty"`
	UnenrollTimeout *float32         `json:"unenroll_timeout,omitempty"`
	UpdatedBy       *string          `json:"updated_by,omitempty"`
	UpdatedOn       *time.Time       `json:"updated_on,omitempty"`
}

// AgentPolicyMonitoringEnabled defines model for AgentPolicy.MonitoringEnabled.
type AgentPolicyMonitoringEnabled string

// AgentPolicyCreateRequest defines model for agent_policy_create_request.
type AgentPolicyCreateRequest struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	DataOutputId       *string                                      `json:"data_output_id"`
	Description        *string                                      `json:"description,omitempty"`
	DownloadSourceId   *string                                      `json:"download_source_id"`
	FleetServerHostId  *string                                      `json:"fleet_server_host_id"`
	Id                 *string                                      `json:"id,omitempty"`
	InactivityTimeout  *float32                                     `json:"inactivity_timeout,omitempty"`
	MonitoringEnabled  *[]AgentPolicyCreateRequestMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                                      `json:"monitoring_output_id"`
	Name               string                                       `json:"name"`
	Namespace          string                                       `json:"namespace"`
	UnenrollTimeout    *float32                                     `json:"unenroll_timeout,omitempty"`
}

// AgentPolicyCreateRequestMonitoringEnabled defines model for AgentPolicyCreateRequest.MonitoringEnabled.
type AgentPolicyCreateRequestMonitoringEnabled string

// AgentPolicyUpdateRequest defines model for agent_policy_update_request.
type AgentPolicyUpdateRequest struct {
	AgentFeatures *[]struct {
		Enabled bool   `json:"enabled"`
		Name    string `json:"name"`
	} `json:"agent_features,omitempty"`
	DataOutputId       *string                                      `json:"data_output_id"`
	Description        *string                                      `json:"description,omitempty"`
	DownloadSourceId   *string                                      `json:"download_source_id"`
	FleetServerHostId  *string                                      `json:"fleet_server_host_id"`
	InactivityTimeout  *float32                                     `json:"inactivity_timeout,omitempty"`
	MonitoringEnabled  *[]AgentPolicyUpdateRequestMonitoringEnabled `json:"monitoring_enabled,omitempty"`
	MonitoringOutputId *string                                      `json:"monitoring_output_id"`
	Name               string                                       `json:"name"`
	Namespace          string                                       `json:"namespace"`
	UnenrollTimeout    *float32                                     `json:"unenroll_timeout,omitempty"`
}

// AgentPolicyUpdateRequestMonitoringEnabled defines model for AgentPolicyUpdateRequest.MonitoringEnabled.
type AgentPolicyUpdateRequestMonitoringEnabled string

// EnrollmentApiKey defines model for enrollment_api_key.
type EnrollmentApiKey struct {
	Active    bool    `json:"active"`
	ApiKey    string  `json:"api_key"`
	ApiKeyId  string  `json:"api_key_id"`
	CreatedAt string  `json:"created_at"`
	Id        string  `json:"id"`
	Name      *string `json:"name,omitempty"`
	PolicyId  *string `json:"policy_id,omitempty"`
}

// NewPackagePolicy defines model for new_package_policy.
type NewPackagePolicy struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Inputs      []struct {
		Config         *map[string]interface{} `json:"config,omitempty"`
		Enabled        bool                    `json:"enabled"`
		PolicyTemplate string                  `json:"policy_template"`
		Processors     *[]string               `json:"processors,omitempty"`
		Streams        *[]struct {
			CompiledStream *map[string]interface{} `json:"compiled_stream,omitempty"`
			DataStream     *struct {
				Dataset *string `json:"dataset,omitempty"`
				Type    *string `json:"type,omitempty"`
			} `json:"data_stream,omitempty"`
			Enabled *bool                   `json:"enabled,omitempty"`
			Id      *string                 `json:"id,omitempty"`
			Vars    *map[string]interface{} `json:"vars,omitempty"`
		} `json:"streams,omitempty"`
		Type string                  `json:"type"`
		Vars *map[string]interface{} `json:"vars,omitempty"`
	} `json:"inputs"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	OutputId  *string `json:"output_id,omitempty"`
	Package   *struct {
		Name    string  `json:"name"`
		Title   *string `json:"title,omitempty"`
		Version string  `json:"version"`
	} `json:"package,omitempty"`
	PolicyId *string `json:"policy_id,omitempty"`
}

// PackagePolicy defines model for package_policy.
type PackagePolicy struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Id          string  `json:"id"`
	Inputs      []struct {
		Config         *map[string]interface{} `json:"config,omitempty"`
		Enabled        bool                    `json:"enabled"`
		PolicyTemplate string                  `json:"policy_template"`
		Processors     *[]string               `json:"processors,omitempty"`
		Streams        *[]struct {
			CompiledStream *map[string]interface{} `json:"compiled_stream,omitempty"`
			DataStream     *struct {
				Dataset *string `json:"dataset,omitempty"`
				Type    *string `json:"type,omitempty"`
			} `json:"data_stream,omitempty"`
			Enabled *bool                   `json:"enabled,omitempty"`
			Id      *string                 `json:"id,omitempty"`
			Vars    *map[string]interface{} `json:"vars,omitempty"`
		} `json:"streams,omitempty"`
		Type string                  `json:"type"`
		Vars *map[string]interface{} `json:"vars,omitempty"`
	} `json:"inputs"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	OutputId  *string `json:"output_id,omitempty"`
	Package   *struct {
		Name    string  `json:"name"`
		Title   *string `json:"title,omitempty"`
		Version string  `json:"version"`
	} `json:"package,omitempty"`
	PolicyId *string `json:"policy_id,omitempty"`
	Revision float32 `json:"revision"`
}

// PackagePolicyRequest defines model for package_policy_request.
type PackagePolicyRequest struct {
	// Description Package policy description
	Description *string `json:"description,omitempty"`

	// Force Force package policy creation even if package is not verified, or if the agent policy is managed.
	Force *bool `json:"force,omitempty"`

	// Id Package policy unique identifier
	Id *string `json:"id,omitempty"`

	// Inputs Package policy inputs (see integration documentation to know what inputs are available)
	Inputs *map[string]PackagePolicyRequestInput `json:"inputs,omitempty"`

	// Name Package policy name (should be unique)
	Name string `json:"name"`

	// Namespace namespace by default "default"
	Namespace *string `json:"namespace,omitempty"`
	Package   struct {
		// Name Package name
		Name string `json:"name"`

		// Version Package version
		Version string `json:"version"`
	} `json:"package"`

	// PolicyId Agent policy ID where that package policy will be added
	PolicyId string `json:"policy_id"`

	// Vars Package root level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// PackagePolicyRequestInput defines model for package_policy_request_input.
type PackagePolicyRequestInput struct {
	// Enabled enable or disable that input, (default to true)
	Enabled *bool `json:"enabled,omitempty"`

	// Streams Input streams (see integration documentation to know what streams are available)
	Streams *map[string]PackagePolicyRequestInputStream `json:"streams,omitempty"`

	// Vars Input level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// PackagePolicyRequestInputStream defines model for package_policy_request_input_stream.
type PackagePolicyRequestInputStream struct {
	// Enabled enable or disable that stream, (default to true)
	Enabled *bool `json:"enabled,omitempty"`

	// Vars Stream level variable (see integration documentation for more information)
	Vars *map[string]interface{} `json:"vars,omitempty"`
}

// Error defines model for error.
type Error struct {
	Error      *string  `json:"error,omitempty"`
	Message    *string  `json:"message,omitempty"`
	StatusCode *float32 `json:"statusCode,omitempty"`
}

// DeleteAgentPolicyJSONBody defines parameters for DeleteAgentPolicy.
type DeleteAgentPolicyJSONBody struct {
	AgentPolicyId string `json:"agentPolicyId"`
}

// DeletePackagePolicyParams defines parameters for DeletePackagePolicy.
type DeletePackagePolicyParams struct {
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// CreateAgentPolicyJSONRequestBody defines body for CreateAgentPolicy for application/json ContentType.
type CreateAgentPolicyJSONRequestBody = AgentPolicyCreateRequest

// DeleteAgentPolicyJSONRequestBody defines body for DeleteAgentPolicy for application/json ContentType.
type DeleteAgentPolicyJSONRequestBody DeleteAgentPolicyJSONBody

// UpdateAgentPolicyJSONRequestBody defines body for UpdateAgentPolicy for application/json ContentType.
type UpdateAgentPolicyJSONRequestBody = AgentPolicyUpdateRequest

// CreatePackagePolicyJSONRequestBody defines body for CreatePackagePolicy for application/json ContentType.
type CreatePackagePolicyJSONRequestBody = PackagePolicyRequest

// UpdatePackagePolicyJSONRequestBody defines body for UpdatePackagePolicy for application/json ContentType.
type UpdatePackagePolicyJSONRequestBody = PackagePolicyRequest
